
import java.awt.Color;
import java.awt.Component;
import java.awt.Container;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Random;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author sabaghasemzadehhassankolaei
 */
public class horseStatsDisplay extends javax.swing.JFrame {
    private static horseStatsDisplay instance;
    private JComboBox<String> horseSelectionDropdown;
    private Map<String, ImageIcon> horseData = new HashMap<>();
    private Map<String, Double> horseConfidence = new HashMap<>();
    private Map<String, String> genMap = new HashMap<>();
    private List<String> horsesInRace = new ArrayList<>();
    private List<String[]> stats = new ArrayList<>();
    
    

    /**
     * Creates new form horseStatsDisplay
     */
    public horseStatsDisplay() {
        initComponents();
        displayHorseStatistics(); // Call method to display horse statistics
        if (creditlbl.getText().equals("credit")) {
            creditlbl.setText(Double.toString(manageCredit.loadCredit()));
        
        }
    startbtn.setEnabled(false); // Disable the set button
    creditField.getDocument().addDocumentListener(new horseStatsDisplay.BecomingRedDocumentListener2(creditField, startbtn));
    
    }
    public List<String[]> readHorseStatsFromCsv(String filePath) throws IOException {
        List<String[]> horseStats = new ArrayList<>();

        try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {
            String line;
            while ((line = br.readLine()) != null) {
                // Assuming each line in the CSV file represents a single record with comma-separated values
                horseStats.add(line.split(","));
            }
        }
        


        return horseStats;
    }
    
    public void read () throws IOException{
        stats = readHorseStatsFromCsv("race_results.csv");
    }
    
    
    
    // Method to randomly select two other horses for the race
    private List<String> selectRandomHorses() {
        List<String> allHorses = new ArrayList<>(genMap.keySet()); // Get all horse names from genMap
        Collections.shuffle(allHorses); // Shuffle the list of horses
        return allHorses.subList(0, Math.min(3, allHorses.size())); // Return the first three elements (or less if there are less than three)

       
    }

        



    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        horseNameTitle = new javax.swing.JLabel();
        averageSpeedTitle = new javax.swing.JLabel();
        ConfidenceTitle = new javax.swing.JLabel();
        winningRatioTitle = new javax.swing.JLabel();
        betReslbl = new javax.swing.JLabel();
        racinglbl = new javax.swing.JLabel();
        horseDropDown = new javax.swing.JComboBox<>();
        creditField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        creditlbl = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        startbtn = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        startbtn1 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(0, 0, 51));
        jPanel1.setForeground(new java.awt.Color(204, 255, 255));
        jPanel1.setMaximumSize(new java.awt.Dimension(500, 500));
        jPanel1.setPreferredSize(new java.awt.Dimension(477, 50));

        horseNameTitle.setFont(new java.awt.Font("Chakra Petch", 0, 18)); // NOI18N
        horseNameTitle.setForeground(new java.awt.Color(255, 255, 255));
        horseNameTitle.setText("Horse name");

        averageSpeedTitle.setFont(new java.awt.Font("Chakra Petch", 0, 18)); // NOI18N
        averageSpeedTitle.setForeground(new java.awt.Color(255, 255, 255));
        averageSpeedTitle.setText("Average Speed ");

        ConfidenceTitle.setFont(new java.awt.Font("Chakra Petch", 0, 18)); // NOI18N
        ConfidenceTitle.setForeground(new java.awt.Color(255, 255, 255));
        ConfidenceTitle.setText("Confidence");

        winningRatioTitle.setFont(new java.awt.Font("Chakra Petch", 0, 18)); // NOI18N
        winningRatioTitle.setForeground(new java.awt.Color(255, 255, 255));
        winningRatioTitle.setText("Winning Ratio");

        betReslbl.setFont(new java.awt.Font("Chakra Petch", 0, 14)); // NOI18N
        betReslbl.setForeground(new java.awt.Color(255, 255, 255));

        racinglbl.setFont(new java.awt.Font("Chakra Petch", 0, 14)); // NOI18N
        racinglbl.setForeground(new java.awt.Color(255, 255, 255));
        racinglbl.setText("horse");

        jLabel1.setFont(new java.awt.Font("Chakra Petch", 0, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("bet");

        creditlbl.setFont(new java.awt.Font("Chakra Petch", 0, 12)); // NOI18N
        creditlbl.setForeground(new java.awt.Color(255, 255, 255));
        creditlbl.setText("credit");

        jButton1.setBackground(new java.awt.Color(199, 205, 225));
        jButton1.setFont(new java.awt.Font("Chakra Petch", 0, 13)); // NOI18N
        jButton1.setText("add credit");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setBackground(new java.awt.Color(199, 205, 225));
        jButton2.setFont(new java.awt.Font("Chakra Petch", 0, 13)); // NOI18N
        jButton2.setText("bet history");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        startbtn.setBackground(new java.awt.Color(199, 205, 225));
        startbtn.setFont(new java.awt.Font("Chakra Petch", 0, 13)); // NOI18N
        startbtn.setText("start race");
        startbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startbtnActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Chakra Petch", 0, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("bet amount");

        startbtn1.setBackground(new java.awt.Color(199, 205, 225));
        startbtn1.setFont(new java.awt.Font("Chakra Petch", 0, 13)); // NOI18N
        startbtn1.setText("back");
        startbtn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startbtn1ActionPerformed(evt);
            }
        });

        jButton3.setBackground(new java.awt.Color(199, 205, 225));
        jButton3.setText("AI analyser");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel1)
                                    .addComponent(startbtn1, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(40, 40, 40)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(creditField, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(horseDropDown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addComponent(creditlbl))
                            .addComponent(racinglbl)
                            .addComponent(betReslbl))
                        .addGap(59, 59, 59)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(startbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(horseNameTitle)
                        .addGap(18, 18, 18)
                        .addComponent(averageSpeedTitle)
                        .addGap(24, 24, 24)
                        .addComponent(ConfidenceTitle)
                        .addGap(18, 18, 18)
                        .addComponent(winningRatioTitle)))
                .addContainerGap(50, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(horseNameTitle)
                    .addComponent(averageSpeedTitle)
                    .addComponent(ConfidenceTitle)
                    .addComponent(winningRatioTitle))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 247, Short.MAX_VALUE)
                .addComponent(betReslbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(startbtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(racinglbl)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(horseDropDown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addGap(7, 7, 7)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(creditField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(creditlbl)
                            .addComponent(jLabel2))))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(startbtn1))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton3)))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 550, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 410, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void startbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startbtnActionPerformed
        // TODO add your handling code here:
        startRace();
        

    }//GEN-LAST:event_startbtnActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        addCredit add = new addCredit();
        add.show();
        dispose();
        
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        betHistoryDisplay display = new betHistoryDisplay();
        display.show();
        dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void startbtn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startbtn1ActionPerformed
        // TODO add your handling code here:
        RaceGUI gui = new RaceGUI();
        gui.show();
        dispose();
    }//GEN-LAST:event_startbtn1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        AiGUI gui = new AiGUI();
    try {
        read();
    } catch (IOException e) {
        // Handle the IOException here
        e.printStackTrace(); // Or handle it in another appropriate way
    }
        gui.setLabelText(AiInsight.getBettingInsights(stats, horsesInRace));

        gui.show();
        
    }//GEN-LAST:event_jButton3ActionPerformed
    
    private void displayHorseStatistics() {
        // Read horse data from file and display statistics
        try (BufferedReader reader = new BufferedReader(new FileReader("race_results.csv"))) {
            String line;
            int row = 0; // Row counter for positioning JLabels
            reader.readLine(); // Skip the header line
            while ((line = reader.readLine()) != null) {
                String[] parts = line.split(","); // Assuming data is comma-separated
                if (parts.length >= 6) { // Ensure data has at least six parts
                    // Extract relevant information
                    String horseName = parts[0];
                    String coat = parts[1];
                    String imagePath = ("/" + coat).replace("%20", " "); // Prepend a forward slash to indicate the root directory
                    double averageSpeed = Double.parseDouble(parts[2]);
                    double confidence = Double.parseDouble(parts[3]);
                    int wins = Integer.parseInt(parts[4]);
                    int losses = Integer.parseInt(parts[5]);

                    // Calculate winning ratio
                    double winningRatio = calculateWinningRatio(wins, losses);
                    
                    String mapValue = imagePath+ ',' + confidence ;
                    genMap.put(horseName, mapValue);
                    // Add horse name to the combo box

                    // Create JLabels to display horse statistics
                    javax.swing.JLabel nameLabel = new javax.swing.JLabel();
                    javax.swing.JLabel speedLabel = new javax.swing.JLabel();
                    javax.swing.JLabel confidenceLabel = new javax.swing.JLabel();
                    javax.swing.JLabel ratioLabel = new javax.swing.JLabel();

                    // Set text for JLabels
                    nameLabel.setText(horseName);
                    speedLabel.setText(String.valueOf(averageSpeed));
                    confidenceLabel.setText(String.format("%.2f", confidence));
                    ratioLabel.setText(String.format("%.2f", winningRatio));

                    // Set foreground color to white
                    nameLabel.setForeground(Color.WHITE);
                    speedLabel.setForeground(Color.WHITE);
                    confidenceLabel.setForeground(Color.WHITE);
                    ratioLabel.setForeground(Color.WHITE);

                    // Set positions for JLabels
                    nameLabel.setBounds(20, 37 + row * 30, 120, 20);
                    speedLabel.setBounds(150, 37 + row * 30, 120, 20);
                    confidenceLabel.setBounds(295, 37 + row * 30, 100, 20);
                    ratioLabel.setBounds(450, 37 + row * 30, 120, 20);

                    // Add JLabels to jPanel1
                    jPanel1.add(nameLabel);
                    jPanel1.add(speedLabel);
                    jPanel1.add(confidenceLabel);
                    jPanel1.add(ratioLabel);

                    row++; // Increment row counter
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        
        List<String> horsesRacing = selectRandomHorses();
        horsesInRace = horsesRacing;
        

        for (String horse : horsesRacing) {
            horseDropDown.addItem(horse);
            
        }
        
        StringBuilder s = new StringBuilder("The racing horses for the new round are: ");
        for (String horse : horsesRacing) {
            s.append(" " + horse);
        }
        
        if (!s.toString().isEmpty()) {
            racinglbl.setText("Please run the race at least once to generate stats.");
        } else {
        
        }
        
        
    }
    
    private static class BecomingRedDocumentListener2 implements DocumentListener {
        private JTextField textField;
        private JButton setButton;

        public BecomingRedDocumentListener2(JTextField textField, JButton setButton) {
            this.textField = textField;
            this.setButton = setButton;
        }

        @Override
        public void insertUpdate(DocumentEvent e) {
            updateComponents();
        }

        @Override
        public void removeUpdate(DocumentEvent e) {
            updateComponents();
        }

        @Override
        public void changedUpdate(DocumentEvent e) {
            updateComponents();
        }

        private void updateComponents() {
            String text = textField.getText();
            try {
                if (text.isEmpty() ||!text.chars().allMatch(Character::isDigit)) {
                    setButton.setEnabled(false); // Disable the set button
                } else {
                    setButton.setEnabled(true); // Enable the set button
                }
            } catch (NumberFormatException ex) {
                setButton.setEnabled(false); // Disable the set button
            }
        }
    }

 


    private double calculateWinningRatio(int wins, int losses) {
        if (wins + losses == 0) {
            return 0.0; // Avoid division by zero
        }
        return (double) wins / (wins + losses);
    }

   
    private void startRace() {
        // Get the selected horse from the dropdown
        String selectedHorse = (String) horseDropDown.getSelectedItem();
        double selectedHorseConfidence = 0.0;
        ImageIcon selectedHorseIcon = null;

        String mapValue = genMap.get(selectedHorse); // Retrieve the value from genMap using the selected horse's name
        if (mapValue != null) {
            String[] parts = mapValue.split(",");
            String coatString = parts[0]; // Coat as a string
            selectedHorseConfidence = Double.parseDouble(parts[1]); // Confidence
            // You can extract other information similarly if needed

            // Now you can use the retrieved information as needed
            selectedHorseIcon = new ImageIcon(getClass().getResource(coatString)); // Convert coat back to ImageIcon if needed
            // Further processing...
        } else {
            System.err.println("Error: Could not find information for horse: " + selectedHorse);
        }

        // Check if bet amount is more than current credit
        double betAmount = Double.parseDouble(creditField.getText());
        double currentCredit = Double.parseDouble(creditlbl.getText());
        if (betAmount > currentCredit) {
            JOptionPane.showMessageDialog(this, "Bet amount cannot be more than current credit!", "Error", JOptionPane.ERROR_MESSAGE);
            return; // Exit the method if there's an error
        }

       
        // Select horses for the race
        List<String> selectedHorses = new ArrayList<>();
            for (int i = 0; i < horseDropDown.getItemCount(); i++) {
                selectedHorses.add((String) horseDropDown.getItemAt(i));
            }
        for (String horse : selectedHorses) {
            String val = genMap.get(horse); // Retrieve the value from genMap using the horse's name

            if (val != null) {
                String[] parts = val.split(",");
                String coatString = parts[0]; // Coat as a string
                double confidence = Double.parseDouble(parts[1]); // Confidence
                System.out.println(confidence);

                // Add the horse's name and icon to the horseData map
                horseData.put(horse, new ImageIcon(getClass().getResource(coatString))); // Convert coat back to ImageIcon if needed

                // Add the horse's confidence to the horseConfidence map
                horseConfidence.put(horse, confidence);
            } else {
                System.err.println("Error: Could not find information for horse: " + horse);
            }
        }

        // Create and show the race GUI with the horseData and horseConfidence maps
        saveBet(selectedHorse, Double.parseDouble(creditField.getText()));
        RaceGUI raceGUI = new RaceGUI(horseData, horseConfidence, 20);
        raceGUI.show();
        dispose();
       
    }
    
        // Helper method to find the JLabel associated with a horse's name
    private JLabel findLabel(String horseName) {
        for (Component component : jPanel1.getComponents()) {
            if (component instanceof JLabel) {
                JLabel label = (JLabel) component;
                if (label.getText().equals(horseName)) {
                    return label;
                }
            }
        }
        return null;
    }
    
    public void addRes(String labelText) {
        betReslbl.setText(labelText);
    }

    
    public void setCurrentCredit(String credit) {
            creditlbl.setText(credit);

    }

        // Other methods and variables...

    public static horseStatsDisplay getInstance() throws IOException {
        if (instance == null) {
            instance = new horseStatsDisplay();
         }
        return instance;
    }
    
    // Add this simplified method to horseStatsDisplay class
    private void saveBet(String selectedHorse, double credit) {
        try (BufferedWriter writer = new BufferedWriter(new FileWriter("bet.txt", false))) {
            // Append the selected horse and whether the bet was won to the file
            writer.write(selectedHorse + "," + credit);
            writer.newLine(); // Add a new line for the next entry
        } catch (IOException e) {
            e.printStackTrace();
        }
    }


        // Other methods...
    

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws IOException {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(horseStatsDisplay.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(horseStatsDisplay.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(horseStatsDisplay.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(horseStatsDisplay.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new horseStatsDisplay().setVisible(true);
            }
        
        });
  
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel ConfidenceTitle;
    private javax.swing.JLabel averageSpeedTitle;
    private javax.swing.JLabel betReslbl;
    private javax.swing.JTextField creditField;
    private javax.swing.JLabel creditlbl;
    private javax.swing.JComboBox<String> horseDropDown;
    private javax.swing.JLabel horseNameTitle;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel racinglbl;
    private javax.swing.JButton startbtn;
    private javax.swing.JButton startbtn1;
    private javax.swing.JLabel winningRatioTitle;
    // End of variables declaration//GEN-END:variables
}
