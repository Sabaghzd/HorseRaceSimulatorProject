
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Scanner;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author sabaghasemzadehhassankolaei
 */
public class RaceStatsDisplay extends javax.swing.JFrame {

    /**
     * Creates new form RaceStatsDisplay
     */
    public RaceStatsDisplay(Map<String, Double> averageSpeeds, Map<String, Double> finalConfidences, long raceDuration, String winner, Race race) {
        initComponents();
        jLabel4.setVisible(false);
        jLabel9.setVisible(false);
        jLabel10.setVisible(false);
        horse3conflbl.setVisible(false);
        horse3namelbl.setVisible(false); 
        horse3averagelbl.setVisible(false);
        horse4conflbl.setVisible(false);
        horse5conflbl.setVisible(false);
        horse4namelbl.setVisible(false);
        horse5namelbl.setVisible(false);
        horse4averagelbl.setVisible(false);
        horse5averagelbl.setVisible(false);
        updateDisplay(averageSpeeds,finalConfidences, raceDuration, winner);
        saveRaceResults(race, averageSpeeds, finalConfidences, winner);
        


    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        horse1namelbl = new javax.swing.JLabel();
        horse2namelbl = new javax.swing.JLabel();
        horse3namelbl = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        horse1averagelbl = new javax.swing.JLabel();
        horse1conflbl = new javax.swing.JLabel();
        horse2averagelbl = new javax.swing.JLabel();
        horse2conflbl = new javax.swing.JLabel();
        horse3averagelbl = new javax.swing.JLabel();
        horse3conflbl = new javax.swing.JLabel();
        raceDurationlbl = new javax.swing.JLabel();
        winnerlbl = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        horse4namelbl = new javax.swing.JLabel();
        horse4averagelbl = new javax.swing.JLabel();
        horse4conflbl = new javax.swing.JLabel();
        horse5conflbl = new javax.swing.JLabel();
        horse5namelbl = new javax.swing.JLabel();
        horse5averagelbl = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();

        jLabel1.setText("jLabel1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(51, 51, 0));
        jPanel1.setForeground(new java.awt.Color(255, 255, 255));

        jLabel2.setFont(new java.awt.Font("Chakra Petch", 0, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 241, 122));
        jLabel2.setText("Horse 1");

        jLabel3.setFont(new java.awt.Font("Chakra Petch", 0, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 241, 122));
        jLabel3.setText("Horse 2");

        jLabel4.setFont(new java.awt.Font("Chakra Petch", 0, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 241, 122));
        jLabel4.setText("Horse 3");

        jLabel5.setFont(new java.awt.Font("Chakra Petch", 0, 18)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 241, 122));
        jLabel5.setText("name");

        jLabel6.setFont(new java.awt.Font("Chakra Petch", 0, 18)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 241, 122));
        jLabel6.setText("average speed");

        jLabel7.setFont(new java.awt.Font("Chakra Petch", 0, 18)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 241, 122));
        jLabel7.setText("confidence");

        horse1namelbl.setFont(new java.awt.Font("Chakra Petch", 0, 13)); // NOI18N
        horse1namelbl.setForeground(new java.awt.Color(255, 255, 255));
        horse1namelbl.setText("jLabel8");

        horse2namelbl.setFont(new java.awt.Font("Chakra Petch", 0, 13)); // NOI18N
        horse2namelbl.setForeground(new java.awt.Color(255, 255, 255));
        horse2namelbl.setText("jLabel9");

        horse3namelbl.setFont(new java.awt.Font("Chakra Petch", 0, 13)); // NOI18N
        horse3namelbl.setForeground(new java.awt.Color(255, 255, 255));
        horse3namelbl.setText("jLabel10");

        jLabel11.setFont(new java.awt.Font("Chakra Petch", 0, 18)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(255, 241, 122));
        jLabel11.setText("Race duration:");

        jLabel12.setFont(new java.awt.Font("Chakra Petch", 0, 18)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(255, 241, 122));
        jLabel12.setText("winner:");

        horse1averagelbl.setFont(new java.awt.Font("Chakra Petch", 0, 13)); // NOI18N
        horse1averagelbl.setForeground(new java.awt.Color(255, 255, 255));
        horse1averagelbl.setText("jLabel8");

        horse1conflbl.setFont(new java.awt.Font("Chakra Petch", 0, 13)); // NOI18N
        horse1conflbl.setForeground(new java.awt.Color(255, 255, 255));
        horse1conflbl.setText("jLabel8");

        horse2averagelbl.setFont(new java.awt.Font("Chakra Petch", 0, 13)); // NOI18N
        horse2averagelbl.setForeground(new java.awt.Color(255, 255, 255));
        horse2averagelbl.setText("jLabel8");

        horse2conflbl.setFont(new java.awt.Font("Chakra Petch", 0, 13)); // NOI18N
        horse2conflbl.setForeground(new java.awt.Color(255, 255, 255));
        horse2conflbl.setText("jLabel8");

        horse3averagelbl.setFont(new java.awt.Font("Chakra Petch", 0, 13)); // NOI18N
        horse3averagelbl.setForeground(new java.awt.Color(255, 255, 255));
        horse3averagelbl.setText("jLabel8");

        horse3conflbl.setFont(new java.awt.Font("Chakra Petch", 0, 13)); // NOI18N
        horse3conflbl.setForeground(new java.awt.Color(255, 255, 255));
        horse3conflbl.setText("jLabel8");

        raceDurationlbl.setFont(new java.awt.Font("Chakra Petch", 0, 13)); // NOI18N
        raceDurationlbl.setForeground(new java.awt.Color(255, 255, 255));
        raceDurationlbl.setText("jLabel8");

        winnerlbl.setFont(new java.awt.Font("Chakra Petch", 0, 13)); // NOI18N
        winnerlbl.setForeground(new java.awt.Color(255, 255, 255));
        winnerlbl.setText("jLabel9");

        jButton1.setBackground(new java.awt.Color(222, 255, 224));
        jButton1.setFont(new java.awt.Font("Chakra Petch", 0, 13)); // NOI18N
        jButton1.setText("Start new Race");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setBackground(new java.awt.Color(222, 255, 224));
        jButton2.setFont(new java.awt.Font("Chakra Petch", 0, 13)); // NOI18N
        jButton2.setText("Go to Betting ");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Chakra Petch", 0, 18)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 241, 122));
        jLabel9.setText("Horse 4");

        horse4namelbl.setFont(new java.awt.Font("Chakra Petch", 0, 13)); // NOI18N
        horse4namelbl.setForeground(new java.awt.Color(255, 255, 255));
        horse4namelbl.setText("jLabel10");

        horse4averagelbl.setFont(new java.awt.Font("Chakra Petch", 0, 13)); // NOI18N
        horse4averagelbl.setForeground(new java.awt.Color(255, 255, 255));
        horse4averagelbl.setText("jLabel8");

        horse4conflbl.setFont(new java.awt.Font("Chakra Petch", 0, 13)); // NOI18N
        horse4conflbl.setForeground(new java.awt.Color(255, 255, 255));
        horse4conflbl.setText("jLabel8");

        horse5conflbl.setFont(new java.awt.Font("Chakra Petch", 0, 13)); // NOI18N
        horse5conflbl.setForeground(new java.awt.Color(255, 255, 255));
        horse5conflbl.setText("jLabel8");

        horse5namelbl.setFont(new java.awt.Font("Chakra Petch", 0, 13)); // NOI18N
        horse5namelbl.setForeground(new java.awt.Color(255, 255, 255));
        horse5namelbl.setText("jLabel10");

        horse5averagelbl.setFont(new java.awt.Font("Chakra Petch", 0, 13)); // NOI18N
        horse5averagelbl.setForeground(new java.awt.Color(255, 255, 255));
        horse5averagelbl.setText("jLabel8");

        jLabel10.setFont(new java.awt.Font("Chakra Petch", 0, 18)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 241, 122));
        jLabel10.setText("Horse 5");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton2)
                    .addComponent(jButton1))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel10)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel4)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel2)))
                            .addComponent(jLabel9))
                        .addGap(34, 34, 34)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(71, 71, 71)
                                .addComponent(jLabel6)
                                .addGap(26, 26, 26)
                                .addComponent(jLabel7))
                            .addComponent(jLabel5)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(7, 7, 7)
                                        .addComponent(horse5namelbl))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(7, 7, 7)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(horse1namelbl)
                                            .addComponent(horse2namelbl)
                                            .addComponent(horse3namelbl)
                                            .addComponent(horse4namelbl))))
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(49, 49, 49)
                                        .addComponent(horse1averagelbl))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(horse2averagelbl, javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(horse3averagelbl, javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(horse4averagelbl, javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(horse5averagelbl, javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(raceDurationlbl, javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(winnerlbl, javax.swing.GroupLayout.Alignment.TRAILING))))
                                .addGap(94, 94, 94)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(horse2conflbl)
                                    .addComponent(horse1conflbl)
                                    .addComponent(horse3conflbl)
                                    .addComponent(horse4conflbl)
                                    .addComponent(horse5conflbl)))))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(jLabel12)
                            .addGap(60, 60, 60))
                        .addComponent(jLabel11)))
                .addGap(0, 24, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(26, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel7)
                        .addComponent(jLabel6)))
                .addGap(27, 27, 27)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(horse1namelbl)
                    .addComponent(horse1averagelbl)
                    .addComponent(horse1conflbl))
                .addGap(14, 14, 14)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(horse2namelbl)
                    .addComponent(horse2averagelbl)
                    .addComponent(horse2conflbl))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(horse3namelbl)
                    .addComponent(horse3averagelbl)
                    .addComponent(horse3conflbl))
                .addGap(13, 13, 13)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(horse4namelbl)
                    .addComponent(horse4averagelbl)
                    .addComponent(horse4conflbl))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(horse5namelbl)
                    .addComponent(horse5averagelbl)
                    .addComponent(horse5conflbl))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 31, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(raceDurationlbl)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(winnerlbl)
                        .addGap(6, 6, 6))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel11)
                        .addGap(1, 1, 1)
                        .addComponent(jLabel12)))
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2)
                .addGap(15, 15, 15))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        String horseName = "";
        double credit = 0.0;
        for (Map.Entry<String, Double> entry : readBet().entrySet()) {
            horseName = entry.getKey();
            credit = entry.getValue();
            // Assuming you want to process only the first entry in the map
            break;
        }

        horseStatsDisplay horseStats = new horseStatsDisplay();
        if (horseName.equals(winnerlbl.getText())){
            horseStats.addRes("the winner is " + winnerlbl.getText() + " You have won the bet");
            saveBetHistory(horseName,true,credit);
            manageCredit.updateCredit(credit,true);
            double updadetCredit = manageCredit.loadCredit();
            horseStats.setCurrentCredit(Double.toString(updadetCredit));
            emptyBetFile();

        } else if (!horseName.equals(winnerlbl.getText()) && !horseName.isEmpty()) {
            horseStats.addRes("the winner is " + winnerlbl.getText() + " You have lost the bet");
            saveBetHistory(horseName,false,credit);
            manageCredit.updateCredit(credit,false);
            double updadetCredit = manageCredit.loadCredit();
            horseStats.setCurrentCredit(Double.toString(updadetCredit));
            emptyBetFile();
        } else {

        }

        horseStats.show();
        dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:

        RaceGUI gui = new RaceGUI();
        gui.show();
        dispose();
    }//GEN-LAST:event_jButton1ActionPerformed
    public static void emptyBetFile() {
            String filePath = "bet.txt";

            File betFile = new File(filePath);

            if (betFile.exists()) {
                try {
                    // Open the file for writing (which clears its contents)
                    FileWriter fileWriter = new FileWriter(betFile);
                    // Close the file
                    fileWriter.close();
                    System.out.println("bet.txt file emptied successfully.");
                } catch (IOException e) {
                    // Handle any IOException that might occur
                    e.printStackTrace();
                    System.out.println("Failed to empty bet.txt file: " + e.getMessage());
                }
            } else {
                System.out.println("bet.txt file does not exist.");
            }
        }    // Method to update the display with the received data
    private void updateDisplay(Map<String, Double> averageSpeeds, Map<String, Double> finalConfidences, long raceDuration, String winner) {
        // Update the labels with the received data
        for (int i = 0; i < averageSpeeds.size(); i++) {
            String horseName = (String) averageSpeeds.keySet().toArray()[i];

            // Update labels based on the horse name
            switch (i) {
                case 0: // First horse
                    horse1namelbl.setText(horseName);
                    horse1averagelbl.setText(String.format("%.2f", averageSpeeds.getOrDefault(horseName, 0.0)) + " units/s");
                    horse1conflbl.setText(String.format("%.2f", finalConfidences.getOrDefault(horseName, 0.0)));

                    break;
                case 1: // Second horse
                    horse2namelbl.setText(horseName);
                    horse2averagelbl.setText(String.format("%.2f", averageSpeeds.getOrDefault(horseName, 0.0)) + " units/s");
                    horse2conflbl.setText(String.format("%.2f", finalConfidences.getOrDefault(horseName, 0.0)));
                    break;
                case 2: // Third horse
                    jLabel4.setVisible(true);
                    horse3namelbl.setVisible(true);
                    horse3namelbl.setText(horseName);
                    horse3averagelbl.setVisible(true);
                    horse3averagelbl.setText(String.format("%.2f", averageSpeeds.getOrDefault(horseName, 0.0)) + " units/s");
                    horse3conflbl.setVisible(true);
                    horse3conflbl.setText(String.format("%.2f", finalConfidences.getOrDefault(horseName, 0.0)));
                    break;
                case 3: // forth horse
                    jLabel9.setVisible(true);
                    horse4namelbl.setVisible(true);
                    horse4namelbl.setText(horseName);
                    horse4averagelbl.setVisible(true);
                    horse4averagelbl.setText(String.format("%.2f", averageSpeeds.getOrDefault(horseName, 0.0)) + " units/s");
                    horse4conflbl.setVisible(true);
                    horse4conflbl.setText(String.format("%.2f", finalConfidences.getOrDefault(horseName, 0.0)));
                    break;
                case 4: // fifth horse
                    jLabel10.setVisible(true);
                    horse5namelbl.setVisible(true);
                    horse5namelbl.setText(horseName);
                    horse5averagelbl.setVisible(true);
                    horse5averagelbl.setText(String.format("%.2f", averageSpeeds.getOrDefault(horseName, 0.0)) + " units/s");
                    horse5conflbl.setVisible(true);
                    horse5conflbl.setText(String.format("%.2f", finalConfidences.getOrDefault(horseName, 0.0)));
                    break;
                default:
                    break;
            }
            
            raceDurationlbl.setText(raceDuration + " milliseconds"); // Update the race duration label
            winnerlbl.setText(winner); // Update the winner label
        }

    }
    
    private Map<String, double[]> readExistingRaceResults(String csvFileName) {
        Map<String, double[]> horseStats = new HashMap<>();
        try (BufferedReader reader = new BufferedReader(new FileReader(csvFileName))) {
            // Skip the header row
            reader.readLine();

            String line;
            while ((line = reader.readLine()) != null) {
                // Parse the line and update horse stats
                String[] parts = line.split(",");
                if (parts.length >= 6) { // Check if the line has enough columns
                    String horseName = parts[0];
                    String coat = parts[1];
                    double wins = Double.parseDouble(parts[4]); // Parse wins as double
                    double losses = Double.parseDouble(parts[5]); // Parse losses as double
                    double averageSpeed = Double.parseDouble(parts[2]); // Parse the average speed
                    horseStats.put(horseName + "," + coat, new double[]{wins, losses, averageSpeed});
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        return horseStats;
    }

    
    private Map<String, Double> readBet() {
        Map<String, Double> bet = new HashMap<>();
        File file = new File("bet.txt");
        if (file.exists() && file.length() > 0) { // Check if the file exists and is not empty
            try (BufferedReader reader = new BufferedReader(new FileReader(file))) {
                String line;
                while ((line = reader.readLine()) != null) {
                    // Split the line into parts using the comma as a delimiter
                    String[] parts = line.split(",");
                    if (parts.length == 2) { // Ensure there are two parts: horse name and bet amount
                        String horseName = parts[0].trim();
                        double betAmount = Double.parseDouble(parts[1].trim());
                        bet.put(horseName, betAmount);
                    }
                }
            } catch (IOException | NumberFormatException e) {
                e.printStackTrace();
            }
        } 
        return bet;
    }



    private void updateRaceResults(Map<String, double[]> horseStats, String horseName, String coat, String raceResult) {
        // Combine horse name and coat to form the key
        String horseKey = horseName + "," + coat;

        // Check if the horse already exists in the horseStats map
        if (horseStats.containsKey(horseKey)) {
            double[] stats = horseStats.get(horseKey);
            if (raceResult.equals("Won")) {
                // Increment wins count
                stats[0]++;
            } else {
                // Increment losses count
                stats[1]++;
            }
            // Update the entry in the horseStats map
            horseStats.put(horseKey, stats);

            // Delete the row from the CSV file
            deleteRowFromCSV(horseName, coat);
        } else {
            // If the horse does not exist in the map, add it with initial wins, losses, and average counts
            double[] stats = new double[3];
            if (raceResult.equals("Won")) {
                stats[0] = 1; // Set wins count to 1
            } else {
                stats[1] = 1; // Set losses count to 1
            }
            horseStats.put(horseKey, stats);
        }
    }

    private void saveRaceResults(Race race, Map<String, Double> averageSpeeds, Map<String, Double> finalConfidences, String winner) {
        String csvFileName = "race_results.csv";
        try (FileWriter writer = new FileWriter(csvFileName, true)) { // Append mode set to true
            // Read existing data from the CSV file and store it in a map
            Map<String, double[]> horseStats = readExistingRaceResults(csvFileName);

            if (Files.size(Paths.get(csvFileName)) == 0) {
                writer.write("Horse Name,Coat,Average Speed,Confidence,Wins,Losses\n");
            }

            // Write data for each horse
            for (int i = 1; i <= race.getNumberOfHorses(); i++) {
                Horse horse = race.getHorseByLane(i);
                String horseName = horse.getName();
                String coat = extractCoatName(horse);
                double existingAverage = horseStats.containsKey(horseName + "," + coat) ? horseStats.get(horseName + "," + coat)[2] : 0.0;
                double newAverage = averageSpeeds.getOrDefault(horseName, 0.0);
                if (Double.isNaN(newAverage) || Double.isInfinite(newAverage)) {
                    newAverage = existingAverage;
                }

                double updatedAverage = (existingAverage + newAverage) / 2;
                double confidence = finalConfidences.getOrDefault(horseName, 0.0);
                String raceResult = (horseName.equals(winner)) ? "Won" : "Lost";

                // Update horse stats
                updateRaceResults(horseStats, horseName, coat, raceResult);

                // Convert updated average to two decimal places
                String formattedAverage = String.format("%.2f", updatedAverage);

                // Write race results to CSV
                writer.write(horseName + "," + coat + "," + formattedAverage + "," + confidence + ","
                        + (int)horseStats.getOrDefault(horseName + "," + coat, new double[]{0, 0, 0})[0] + "," // Wins
                        + (int)horseStats.getOrDefault(horseName + "," + coat, new double[]{0, 0, 0})[1] + "\n"); // Losses
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }



    private void deleteRowFromCSV(String horseName, String coat) {
        String csvFileName = "race_results.csv";
        try {
            // Read all lines from the CSV file into a list
            List<String> lines = Files.readAllLines(Paths.get(csvFileName));

            // Iterate over the lines and remove the line that matches the criteria
            Iterator<String> iterator = lines.iterator();
            while (iterator.hasNext()) {
                String line = iterator.next();
                String[] parts = line.split(",");
                if (parts.length >= 2 && parts[0].equals(horseName) && parts[1].equals(coat)) {
                    iterator.remove(); // Remove the line
                    break; // Exit the loop after removing the first matching row
                }
            }

            // Write the updated lines back to the CSV file
            FileWriter writer = new FileWriter(csvFileName);
            for (String line : lines) {
                writer.write(line + "\n");
            }
            writer.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }


    

    
    private String extractCoatName(Horse horse) {
        String coat = horse.getCoat();
        if (coat != null && coat.contains("file:/")) {
            // Extract coat name from the URL
            int lastSlashIndex = coat.lastIndexOf("/");
            if (lastSlashIndex != -1) {
                return coat.substring(lastSlashIndex + 1);
            }
        }
        return coat;
    }

    // Method to save the bet history to a text file
    private void saveBetHistory(String bet, boolean won, double amount) {
        try (BufferedWriter writer = new BufferedWriter(new FileWriter("bet_history.txt", true))) {
            
                writer.write(bet + "," + (won ? "won" : "lost") + "," + amount);
                
                writer.newLine(); // Add a new line for the next entry
            
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    // Method to format map values to strings with two decimal places
    private String formatMapValues(Map<String, Double> map) {
        StringBuilder builder = new StringBuilder("{");
        for (Map.Entry<String, Double> entry : map.entrySet()) {
            builder.append(entry.getKey()).append("=").append(String.format("%.2f", entry.getValue())).append(", ");
        }
        if (!map.isEmpty()) {
            builder.setLength(builder.length() - 2); // Remove the trailing ", "
        }
        builder.append("}");
        return builder.toString();
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RaceStatsDisplay.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RaceStatsDisplay.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RaceStatsDisplay.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RaceStatsDisplay.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                //new RaceStatsDisplay().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel horse1averagelbl;
    private javax.swing.JLabel horse1conflbl;
    private javax.swing.JLabel horse1namelbl;
    private javax.swing.JLabel horse2averagelbl;
    private javax.swing.JLabel horse2conflbl;
    private javax.swing.JLabel horse2namelbl;
    private javax.swing.JLabel horse3averagelbl;
    private javax.swing.JLabel horse3conflbl;
    private javax.swing.JLabel horse3namelbl;
    private javax.swing.JLabel horse4averagelbl;
    private javax.swing.JLabel horse4conflbl;
    private javax.swing.JLabel horse4namelbl;
    private javax.swing.JLabel horse5averagelbl;
    private javax.swing.JLabel horse5conflbl;
    private javax.swing.JLabel horse5namelbl;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel raceDurationlbl;
    private javax.swing.JLabel winnerlbl;
    // End of variables declaration//GEN-END:variables
}
